/******************************************************************************
 * Spine Runtimes License Agreement
 * Last updated July 28, 2023. Replaces all prior versions.
 *
 * Copyright (c) 2013-2023, Esoteric Software LLC
 *
 * Integration of the Spine Runtimes into software or otherwise creating
 * derivative works of the Spine Runtimes is permitted under the terms and
 * conditions of Section 2 of the Spine Editor License Agreement:
 * http://esotericsoftware.com/spine-editor-license
 *
 * Otherwise, it is permitted to integrate the Spine Runtimes into software or
 * otherwise create derivative works of the Spine Runtimes (collectively,
 * "Products"), provided that each user of the Products must obtain their own
 * Spine Editor license and redistribution of the Products in any form must
 * include this license and copyright notice.
 *
 * THE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,
 * BUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THE
 * SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************/
import { Buffer, BufferUsage, Geometry } from 'pixi.js';
const placeHolderBufferData = new Float32Array(1);
const placeHolderIndexData = new Uint32Array(1);
export class DarkTintBatchGeometry extends Geometry {
    constructor() {
        const vertexSize = 7;
        const attributeBuffer = new Buffer({
            data: placeHolderBufferData,
            label: 'attribute-batch-buffer',
            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,
            shrinkToFit: false,
        });
        const indexBuffer = new Buffer({
            data: placeHolderIndexData,
            label: 'index-batch-buffer',
            usage: BufferUsage.INDEX | BufferUsage.COPY_DST, // | BufferUsage.STATIC,
            shrinkToFit: false,
        });
        const stride = vertexSize * 4;
        super({
            attributes: {
                aPosition: {
                    buffer: attributeBuffer,
                    format: 'float32x2',
                    stride,
                    offset: 0,
                },
                aUV: {
                    buffer: attributeBuffer,
                    format: 'float32x2',
                    stride,
                    offset: 2 * 4,
                },
                aColor: {
                    buffer: attributeBuffer,
                    format: 'unorm8x4',
                    stride,
                    offset: 4 * 4,
                },
                aDarkColor: {
                    buffer: attributeBuffer,
                    format: 'unorm8x4',
                    stride,
                    offset: 5 * 4,
                },
                aTextureIdAndRound: {
                    buffer: attributeBuffer,
                    format: 'uint16x2',
                    stride,
                    offset: 6 * 4,
                },
            },
            indexBuffer
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGFya1RpbnRCYXRjaEdlb21ldHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Rhcmt0aW50L0RhcmtUaW50QmF0Y2hHZW9tZXRyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytFQTJCK0U7QUFFL0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRXhELE1BQU0scUJBQXFCLEdBQUcsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEQsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUVoRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsUUFBUTtJQUNsRDtRQUNDLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQztRQUVyQixNQUFNLGVBQWUsR0FBRyxJQUFJLE1BQU0sQ0FBQztZQUNsQyxJQUFJLEVBQUUscUJBQXFCO1lBQzNCLEtBQUssRUFBRSx3QkFBd0I7WUFDL0IsS0FBSyxFQUFFLFdBQVcsQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLFFBQVE7WUFDaEQsV0FBVyxFQUFFLEtBQUs7U0FDbEIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxXQUFXLEdBQUcsSUFBSSxNQUFNLENBQUM7WUFDOUIsSUFBSSxFQUFFLG9CQUFvQjtZQUMxQixLQUFLLEVBQUUsb0JBQW9CO1lBQzNCLEtBQUssRUFBRSxXQUFXLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQyxRQUFRLEVBQUUsd0JBQXdCO1lBQ3pFLFdBQVcsRUFBRSxLQUFLO1NBQ2xCLENBQUMsQ0FBQztRQUVILE1BQU0sTUFBTSxHQUFHLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFFOUIsS0FBSyxDQUFDO1lBQ0wsVUFBVSxFQUFFO2dCQUNYLFNBQVMsRUFBRTtvQkFDVixNQUFNLEVBQUUsZUFBZTtvQkFDdkIsTUFBTSxFQUFFLFdBQVc7b0JBQ25CLE1BQU07b0JBQ04sTUFBTSxFQUFFLENBQUM7aUJBQ1Q7Z0JBQ0QsR0FBRyxFQUFFO29CQUNKLE1BQU0sRUFBRSxlQUFlO29CQUN2QixNQUFNLEVBQUUsV0FBVztvQkFDbkIsTUFBTTtvQkFDTixNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUM7aUJBQ2I7Z0JBQ0QsTUFBTSxFQUFFO29CQUNQLE1BQU0sRUFBRSxlQUFlO29CQUN2QixNQUFNLEVBQUUsVUFBVTtvQkFDbEIsTUFBTTtvQkFDTixNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUM7aUJBQ2I7Z0JBQ0QsVUFBVSxFQUFFO29CQUNYLE1BQU0sRUFBRSxlQUFlO29CQUN2QixNQUFNLEVBQUUsVUFBVTtvQkFDbEIsTUFBTTtvQkFDTixNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUM7aUJBQ2I7Z0JBQ0Qsa0JBQWtCLEVBQUU7b0JBQ25CLE1BQU0sRUFBRSxlQUFlO29CQUN2QixNQUFNLEVBQUUsVUFBVTtvQkFDbEIsTUFBTTtvQkFDTixNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUM7aUJBQ2I7YUFDRDtZQUNELFdBQVc7U0FDWCxDQUFDLENBQUM7SUFDSixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBTcGluZSBSdW50aW1lcyBMaWNlbnNlIEFncmVlbWVudFxuICogTGFzdCB1cGRhdGVkIEp1bHkgMjgsIDIwMjMuIFJlcGxhY2VzIGFsbCBwcmlvciB2ZXJzaW9ucy5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAyMywgRXNvdGVyaWMgU29mdHdhcmUgTExDXG4gKlxuICogSW50ZWdyYXRpb24gb2YgdGhlIFNwaW5lIFJ1bnRpbWVzIGludG8gc29mdHdhcmUgb3Igb3RoZXJ3aXNlIGNyZWF0aW5nXG4gKiBkZXJpdmF0aXZlIHdvcmtzIG9mIHRoZSBTcGluZSBSdW50aW1lcyBpcyBwZXJtaXR0ZWQgdW5kZXIgdGhlIHRlcm1zIGFuZFxuICogY29uZGl0aW9ucyBvZiBTZWN0aW9uIDIgb2YgdGhlIFNwaW5lIEVkaXRvciBMaWNlbnNlIEFncmVlbWVudDpcbiAqIGh0dHA6Ly9lc290ZXJpY3NvZnR3YXJlLmNvbS9zcGluZS1lZGl0b3ItbGljZW5zZVxuICpcbiAqIE90aGVyd2lzZSwgaXQgaXMgcGVybWl0dGVkIHRvIGludGVncmF0ZSB0aGUgU3BpbmUgUnVudGltZXMgaW50byBzb2Z0d2FyZSBvclxuICogb3RoZXJ3aXNlIGNyZWF0ZSBkZXJpdmF0aXZlIHdvcmtzIG9mIHRoZSBTcGluZSBSdW50aW1lcyAoY29sbGVjdGl2ZWx5LFxuICogXCJQcm9kdWN0c1wiKSwgcHJvdmlkZWQgdGhhdCBlYWNoIHVzZXIgb2YgdGhlIFByb2R1Y3RzIG11c3Qgb2J0YWluIHRoZWlyIG93blxuICogU3BpbmUgRWRpdG9yIGxpY2Vuc2UgYW5kIHJlZGlzdHJpYnV0aW9uIG9mIHRoZSBQcm9kdWN0cyBpbiBhbnkgZm9ybSBtdXN0XG4gKiBpbmNsdWRlIHRoaXMgbGljZW5zZSBhbmQgY29weXJpZ2h0IG5vdGljZS5cbiAqXG4gKiBUSEUgU1BJTkUgUlVOVElNRVMgQVJFIFBST1ZJREVEIEJZIEVTT1RFUklDIFNPRlRXQVJFIExMQyBcIkFTIElTXCIgQU5EIEFOWVxuICogRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgRVNPVEVSSUMgU09GVFdBUkUgTExDIEJFIExJQUJMRSBGT1IgQU5ZXG4gKiBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICogKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTLFxuICogQlVTSU5FU1MgSU5URVJSVVBUSU9OLCBPUiBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUykgSE9XRVZFUiBDQVVTRUQgQU5EXG4gKiBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRIRVxuICogU1BJTkUgUlVOVElNRVMsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCB7IEJ1ZmZlciwgQnVmZmVyVXNhZ2UsIEdlb21ldHJ5IH0gZnJvbSAncGl4aS5qcyc7XG5cbmNvbnN0IHBsYWNlSG9sZGVyQnVmZmVyRGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoMSk7XG5jb25zdCBwbGFjZUhvbGRlckluZGV4RGF0YSA9IG5ldyBVaW50MzJBcnJheSgxKTtcblxuZXhwb3J0IGNsYXNzIERhcmtUaW50QmF0Y2hHZW9tZXRyeSBleHRlbmRzIEdlb21ldHJ5IHtcblx0Y29uc3RydWN0b3IgKCkge1xuXHRcdGNvbnN0IHZlcnRleFNpemUgPSA3O1xuXG5cdFx0Y29uc3QgYXR0cmlidXRlQnVmZmVyID0gbmV3IEJ1ZmZlcih7XG5cdFx0XHRkYXRhOiBwbGFjZUhvbGRlckJ1ZmZlckRhdGEsXG5cdFx0XHRsYWJlbDogJ2F0dHJpYnV0ZS1iYXRjaC1idWZmZXInLFxuXHRcdFx0dXNhZ2U6IEJ1ZmZlclVzYWdlLlZFUlRFWCB8IEJ1ZmZlclVzYWdlLkNPUFlfRFNULFxuXHRcdFx0c2hyaW5rVG9GaXQ6IGZhbHNlLFxuXHRcdH0pO1xuXG5cdFx0Y29uc3QgaW5kZXhCdWZmZXIgPSBuZXcgQnVmZmVyKHtcblx0XHRcdGRhdGE6IHBsYWNlSG9sZGVySW5kZXhEYXRhLFxuXHRcdFx0bGFiZWw6ICdpbmRleC1iYXRjaC1idWZmZXInLFxuXHRcdFx0dXNhZ2U6IEJ1ZmZlclVzYWdlLklOREVYIHwgQnVmZmVyVXNhZ2UuQ09QWV9EU1QsIC8vIHwgQnVmZmVyVXNhZ2UuU1RBVElDLFxuXHRcdFx0c2hyaW5rVG9GaXQ6IGZhbHNlLFxuXHRcdH0pO1xuXG5cdFx0Y29uc3Qgc3RyaWRlID0gdmVydGV4U2l6ZSAqIDQ7XG5cblx0XHRzdXBlcih7XG5cdFx0XHRhdHRyaWJ1dGVzOiB7XG5cdFx0XHRcdGFQb3NpdGlvbjoge1xuXHRcdFx0XHRcdGJ1ZmZlcjogYXR0cmlidXRlQnVmZmVyLFxuXHRcdFx0XHRcdGZvcm1hdDogJ2Zsb2F0MzJ4MicsXG5cdFx0XHRcdFx0c3RyaWRlLFxuXHRcdFx0XHRcdG9mZnNldDogMCxcblx0XHRcdFx0fSxcblx0XHRcdFx0YVVWOiB7XG5cdFx0XHRcdFx0YnVmZmVyOiBhdHRyaWJ1dGVCdWZmZXIsXG5cdFx0XHRcdFx0Zm9ybWF0OiAnZmxvYXQzMngyJyxcblx0XHRcdFx0XHRzdHJpZGUsXG5cdFx0XHRcdFx0b2Zmc2V0OiAyICogNCxcblx0XHRcdFx0fSxcblx0XHRcdFx0YUNvbG9yOiB7XG5cdFx0XHRcdFx0YnVmZmVyOiBhdHRyaWJ1dGVCdWZmZXIsXG5cdFx0XHRcdFx0Zm9ybWF0OiAndW5vcm04eDQnLFxuXHRcdFx0XHRcdHN0cmlkZSxcblx0XHRcdFx0XHRvZmZzZXQ6IDQgKiA0LFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRhRGFya0NvbG9yOiB7XG5cdFx0XHRcdFx0YnVmZmVyOiBhdHRyaWJ1dGVCdWZmZXIsXG5cdFx0XHRcdFx0Zm9ybWF0OiAndW5vcm04eDQnLFxuXHRcdFx0XHRcdHN0cmlkZSxcblx0XHRcdFx0XHRvZmZzZXQ6IDUgKiA0LFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRhVGV4dHVyZUlkQW5kUm91bmQ6IHtcblx0XHRcdFx0XHRidWZmZXI6IGF0dHJpYnV0ZUJ1ZmZlcixcblx0XHRcdFx0XHRmb3JtYXQ6ICd1aW50MTZ4MicsXG5cdFx0XHRcdFx0c3RyaWRlLFxuXHRcdFx0XHRcdG9mZnNldDogNiAqIDQsXG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdFx0aW5kZXhCdWZmZXJcblx0XHR9KTtcblx0fVxufVxuXG4iXX0=